// FOR ME: Vanilla Emacs: You can use ` C-x C-+ ' and 'C-x C--' ( 'text-scale-adjust' ) to increase or decrease

// go over: cd, pwd, ls
// go over: text editors
// go over: idyll create command => start new site

// Also: we will start with a "blog" style post.
//  Other styles will (maybe) be talked about later
//  And can be changed with packages.json


// PART 1: The basics

// We will build up our intuition for how this works line by line

// First, lets cover some "command line" things we'll need:
//    Start first with cd, pwd, ls in command line

// Then: text editor, make sure you don't save as rich-text formatting

// Onto our first idyll project:
// so, here is what I get if I do: idyll create and enter "firstIdyll" for the
//    directory and "Alice" for the project name

// lets actually start with a blank slate ** DELETE ALL LINES BELOW HERE **


[meta title:"My First Project" description:"This is my very first project!" /]
// Note: I can leave comments to myself here with these to slashes
// this won't get compiled into our final webpage and I can remember what I'm doing!  neato

// Lets re-put in a nice header for our webpage: */
[Header
  title:"My First Project"
  subtitle:"Welcome to my new project."
  author:"Jill P. Naiman"
  authorLink:"https://www.astronaiman.com" /] // this links to my personal webpage, so that is cool

// Now, lets add some plain text:
This subsection here is just plain text. // magical */

// Like in our jupyter notebooks, we can build up interactive
//  elements, for example we can add sliders, toggles, etc
Here is how you can use a variable, by default it does a slider:

[var name:"exampleVar" value:6 /] // first, we define our variable and its name, and its initial value
[Range min:-5 max:10 value:exampleVar /] // next, what are the min and max of the variable
[Display value:exampleVar /] // finally - lets display the ol' thing

// now we have a slider that moves around and prints stuff which is cool

// as an aside, lets say we want to write the code that it takes
// to make this slider, we can just copy paste and include
// 3 little ``` 's around it like so:

```
[var name:"exampleVar" value:6 /] // first, we define our variable and its name, and its initial value
[Range min:-5 max:10 value:exampleVar /] // next, what are the min and max of the variable
[Display value:exampleVar /] // finally - lets display the ol' thing
```

// the above ``` 's are very common to Markdown




// PART 2: Adding images

// lets put in some images, but first a header that says that is what we are doing
## Putting in Images 

// lets start by adding a basic image to our website
// we'll use on off the course website
// (1)
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
///]

// now, there are a few things we might want to fix about this

//  (2) for example, lets change the size of this image
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200}`
///]
// now our little corgi image is a more reasonable size

// (3) we can also add a margin to the top of our corgi image so that nothing gets too close
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200, margin: '30px auto'}`
///]

// (4) Now, lets try 2 side by side images
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200, margin: '30px auto'}`
///]
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2809.jpg'
//  style:`{width:200, margin: '30px auto'}`
///]
// note the above images are from 2 different locations - week 4 & week 10
// in this way, we can link images from around the internets

// so, we notice a few things here
// first the images are not the same height, but *are* the same width
// there is also no gab around them and they are side by side
// lets play with these options a big


// (5) 
[img
  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
  style:`{height:300, padding: '10px'}`
/]
[img
  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2809.jpg'
  style:`{height:300, padding: '10px'}`
/]
// now the images are the same height, side by side, and they have a border
//  note: if we re-size the post, eventualy one of the images goes underneath

// (6) - leave (5) up
// we can also do text next to images, and do cool things with their layout
// lets put a "fixed" image and then scroll some text next to it
// will do this with "waypoint" and "fixed" tags

// PART 3: Scrolling */

## Scrolling Overlays

 // more info here: https://idyll.pub/post/stack-scroll-0c3da7fb8e45f3ecb720bcf8/ */
 [var name:"scrollerIndex" value:1 /]

[Scroller currentStep:scrollerIndex]
  [Graphic style:`{padding: 5}`]
      [img
        src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2814.jpg'
//        style:`{height:700}` // */
        style:`{height:700, float:"left"}` // (2) lets say we want it on the left to make room
       /]
  [/Graphic]

  [Step]## Welsh Corgis are a small type of herding dog that originated in Wales, UK.[/Step]
  [Step]## "Corgi" is Welsh for "dwarf dog"   [/Step]
  [Step]## Queen Elizabeth II has owned more than 30 corgis in her lifetime.[/Step]
  [Step]## Corgi-Dachshund mixes are called dorgis.[/Step]

[/Scroller]

// (2) Another fun layout type thing we can do is add fixed text or images
//[Fixed]
//[img
//   //src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/imgcropped.png'
//   // (3) note: we can also copy figures into our website directory:
//   //  **cd to static/images
//   //  **Download imgcropped.png or use wget or curl
//   //  **Update this link
//   src:'static/images/imgcropped.png'
//   style:`{height:200}`
///]
//[/Fixed]
// Comment out this Fixed when done


   // Part 3: quick test of vega lite */
# Plot our Dataset with Vega-lite!

[data name:"corgData" source:"corgiData_countries.json"  /]
[Table data:`corgData.slice(0, 10)` /]
   
// [data name:"exData" source:"example-data.json"  /]
// [Table data:`exData.slice(0, 10)` /] // */

### Simple scatter plots

We can run some simple code to make a scatter plot of countries vs. years born:


```
[var name:"colorBy" value:`{}` /]

[IdyllVegaLite data:corgData spec:`{
  width: 400,
  height: 200,
  mark: "circle",
  encoding: {
    x: {field: "countries", type: "nominal"}, 
    y: {field: "year", type: "temporal"},
	color: colorBy
  }
}` /]

Color by:
 [button onClick:`colorBy ={}`]None[/button]
 [button onClick:`colorBy ={field:'sex', type: 'nominal'}`]Sex of Corgi[/button]

```

[var name:"colorBy" value:`{}` /]

[IdyllVegaLite data:corgData spec:`{
  width: 400,
  height: 200,
  mark: "circle",
  encoding: {
    x: {field: "countries", type: "nominal"}, 
    y: {field: "year", type: "temporal"},
	color: colorBy
  }
}` /]

Color by:
 [button onClick:`colorBy ={}`]None[/button]
 [button onClick:`colorBy ={field:'sex', type: 'nominal'}`]Sex of Corgi[/button]


Let's try another example where we need to update our colormap.

We can check out the [available Vega-lite](https://vega.github.io/vega/docs/schemes/#reference) colors and pick one. 

[var name:"colorBy2" value:`{}` /]

[IdyllVegaLite data:corgData spec:`{
  width: 400,
  height: 400,
  mark: "circle",
  encoding: {
    x: {field: "sire", type: "nominal", axis:{labels:false}}, 
    y: {field: "dam", type: "nominal", axis:{labels:false}},
	color: colorBy2
  }
}` /]

Color by:
 [button onClick:`colorBy2 = {}`]None[/button]
 [button onClick:`colorBy2 ={field:'countries', 
    type:'nominal', scale:{"scheme":"inferno"}}`]Country[/button]

The highest number of colors for a nominal dataset is only 20 ```category20``` color scheme.

### Binning and aggregating of data - histograms

Let's make some histograms with our data using vega-lite.

[IdyllVegaLite data:corgData spec:`{
  width: 400,
  height: 400,
  transform:[{filter:{"timeUnit":"year", field:"year", "lte":2010}},
             {filter:{"timeUnit":"year", field:"year", "gte":2000}}],
  mark: "bar",
  encoding: {
    x: {field: "year", type: "temporal"}, 
    y: {aggregate:"count", type:"quantitative", title:"Number of Corgis Born"},
  }
}` /]

We learned about histograms, binning, and some basic filter, now onto interactivity!

### Interactivity

[var name:"yearStart" value:1960 /]
[var name:"yearEnd" value:2000 /]
[var name:"colorBy3" value:`{}` /]

[IdyllVegaLite data:corgData spec:`{
  width: 400,
  height: 400,
  transform:[{filter:{"timeUnit":"year", field:"year", "lte":yearEnd}},
             {filter:{"timeUnit":"year", field:"year", "gte":yearStart}}],
  mark: "bar",
  encoding: {
    x: {field: "year", type: "temporal"}, 
    y: {aggregate:"count", type:"quantitative", title:"Number of Corgis Born"},
	color: colorBy3
  }
}` /]

Color by:
 [button onClick:`colorBy3 = {}`]None[/button]
 [button onClick:`colorBy3 ={field:'countries', 
    type:'nominal', scale:{"scheme":"inferno"}}`]Country[/button]
 [button onClick:`colorBy3 ={field:'sex', type: 'nominal'}`]Sex of Corgi[/button]

[section]
Lowest Year: 1925 [Range min:1925 max:yearEnd value:yearStart /] 2020

Highest Year: 1925 [Range min:yearStart max:2020 value:yearEnd /] 2020
[/section]

The code we used to make our interactive viz is the following:

```
[var name:"yearStart" value:1960 /]
[var name:"yearEnd" value:2000 /]
[var name:"colorBy3" value:`{}` /]

[IdyllVegaLite data:corgData spec:`{
  width: 400,
  height: 400,
  transform:[{filter:{"timeUnit":"year", field:"year", "lte":yearEnd}},
             {filter:{"timeUnit":"year", field:"year", "gte":yearStart}}],
  mark: "bar",
  encoding: {
    x: {field: "year", type: "temporal"}, 
    y: {aggregate:"count", type:"quantitative", title:"Number of Corgis Born"},
	color: colorBy3
  }
}` /]

Color by:
 [button onClick:`colorBy3 = {}`]None[/button]
 [button onClick:`colorBy3 ={field:'countries', 
    type:'nominal', scale:{"scheme":"inferno"}}`]Country[/button]
 [button onClick:`colorBy3 ={field:'sex', type: 'nominal'}`]Sex of Corgi[/button]

[section]
Lowest Year: 1925 [Range min:1925 max:yearEnd value:yearStart /] 2020

Highest Year: 1925 [Range min:yearStart max:2020 value:yearEnd /] 2020
[/section]
```
