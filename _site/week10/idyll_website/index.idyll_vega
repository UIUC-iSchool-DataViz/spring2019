// FOR ME: Vanilla Emacs: You can use ` C-x C-+ ' and 'C-x C--' ( 'text-scale-adjust' ) to increase or decrease

// go over: cd, pwd, ls
// go over: text editors
// go over: idyll create command => start new site

// Also: we will start with a "blog" style post.
//  Other styles will (maybe) be talked about later
//  And can be changed with packages.json


// PART 1: The basics

// We will build up our intuition for how this works line by line

// First, lets cover some "command line" things we'll need:
//    Start first with cd, pwd, ls in command line

// Then: text editor, make sure you don't save as rich-text formatting

// Onto our first idyll project:
// so, here is what I get if I do: idyll create and enter "firstIdyll" for the
//    directory and "Alice" for the project name

// lets actually start with a blank slate ** DELETE ALL LINES BELOW HERE **


[meta title:"My First Project" description:"This is my very first project!" /]
// Note: I can leave comments to myself here with these to slashes
// this won't get compiled into our final webpage and I can remember what I'm doing!  neato

// Lets re-put in a nice header for our webpage:
[Header
  title:"My First Project"
  subtitle:"Welcome to my new project."
  author:"Jill P. Naiman"
  authorLink:"https://www.astronaiman.com" /] // this links to my personal webpage, so that is cool

// Now, lets add some plain text:
This subsection here is just plain text. // magical

// Like in our jupyter notebooks, we can build up interactive
//  elements, for example we can add sliders, toggles, etc
Here is how you can use a variable, by default it does a slider:

[var name:"exampleVar" value:6 /] // first, we define our variable and its name, and its initial value
[Range min:-5 max:10 value:exampleVar /] // next, what are the min and max of the variable
[Display value:exampleVar /] // finally - lets display the ol' thing

// now we have a slider that moves around and prints stuff which is cool

// as an aside, lets say we want to write the code that it takes
// to make this slider, we can just copy paste and include
// 3 little ``` 's around it like so:

```
[var name:"exampleVar" value:6 /] // first, we define our variable and its name, and its initial value
[Range min:-5 max:10 value:exampleVar /] // next, what are the min and max of the variable
[Display value:exampleVar /] // finally - lets display the ol' thing
```

// the above ``` 's are very common to Markdown




// PART 2: Adding images

// lets put in some images, but first a header that says that is what we are doing
## Putting in Images 

// lets start by adding a basic image to our website
// we'll use on off the course website
// (1)
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
///]

// now, there are a few things we might want to fix about this

//  (2) for example, lets change the size of this image
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200}`
///]
// now our little corgi image is a more reasonable size

// (3) we can also add a margin to the top of our corgi image so that nothing gets too close
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200, margin: '30px auto'}`
///]

// (4) Now, lets try 2 side by side images
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200, margin: '30px auto'}`
///]
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2809.jpg'
//  style:`{width:200, margin: '30px auto'}`
///]
// note the above images are from 2 different locations - week 4 & week 10
// in this way, we can link images from around the internets

// so, we notice a few things here
// first the images are not the same height, but *are* the same width
// there is also no gab around them and they are side by side
// lets play with these options a big


// (5) 
[img
  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
  style:`{height:300, padding: '10px'}`
/]
[img
  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2809.jpg'
  style:`{height:300, padding: '10px'}`
/]
// now the images are the same height, side by side, and they have a border
//  note: if we re-size the post, eventualy one of the images goes underneath

// (6) - leave (5) up
// we can also do text next to images, and do cool things with their layout
// lets put a "fixed" image and then scroll some text next to it
// will do this with "waypoint" and "fixed" tags

// PART 3: Scrolling

## Scrolling Overlays

 // more info here: https://idyll.pub/post/stack-scroll-0c3da7fb8e45f3ecb720bcf8/
 [var name:"scrollerIndex" value:0 /]

[Scroller currentStep:scrollerIndex]
  [Graphic style:`{padding: 5}`]
      [img
        src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2814.jpg'
//        style:`{height:700}`
        style:`{height:700, float:"left"}` // (2) lets say we want it on the left to make room
       /]
  [/Graphic]

  [Step]## Welsh Corgis are a small type of herding dog that originated in Wales, UK.[/Step]
  [Step]## "Corgi" is Welsh for "dwarf dog"   [/Step]
  [Step]## Queen Elizabeth II has owned more than 30 corgis in her lifetime.[/Step]
  [Step]## Corgi-Dachshund mixes are called dorgis.[/Step]

[/Scroller]

// (2) Another fun layout type thing we can do is add fixed text or images
//[Fixed]
//[img
//   //src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/imgcropped.png'
//   // (3) note: we can also copy figures into our website directory:
//   //  **cd to static/images
//   //  **Download imgcropped.png or use wget or curl
//   //  **Update this link
//   src:'static/images/imgcropped.png'
//   style:`{height:200}`
///]
//[/Fixed]
// Comment out this Fixed when done





// PART 4: Adding data and interactive viz using vega-lite
// Dataset from webscrape of: http://www.cardiped.net/browseDogs.php

# Vega-Lite for dataviz

Dataset comes from online database: [Corgi Database](http://www.cardiped.net/browseDogs.php)

Note: a webscrape was performed to grab this dataset with [Python code](https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/grabCorgData.py) available for interested parties.


// I THINK THIS SHOULD BE PART OF HW

### Reading data basics

First, lets start by reading in a data set and checking it out as a table (just first 10 rows):

[data name:"corgs" source:"corgiData.json"  /]
[Table data:`corgs.slice(0, 10)` /]

### Plotting our data

To plot this we want use vega-lite to start.

In the directory with this index.idyll file do:

```
npm install --save idyll-vega-lite
```

From this, you might get some errors like:

```
npm WARN acorn-dynamic-import@4.0.0 requires a peer of acorn@^6.0.0 but none is installed. You must install peer dependencies yourself.
npm WARN idyll-component@1.2.2 requires a peer of react@^15.5.4 but none is installed. You must install peer dependencies yourself.
npm WARN idyll-component@1.2.2 requires a peer of react-dom@^15.5.4 but none is installed. You must install peer dependencies yourself.
npm WARN react-vega-lite@1.1.3 requires a peer of vega-lite@^2.0.0 but none is installed. You must install peer dependencies yourself.
npm WARN react-vega@3.1.2 requires a peer of vega@^3.0.0 but none is installed. You must install peer dependencies yourself.
npm WARN myfirstpost@1.0.0 No description
npm WARN myfirstpost@1.0.0 No repository field.
```

This is because of some silly install errors where it is looking for the "^" character.  Its annoying, but we have a way around it -
we'll install them by hand:

```
npm install --save acorn@^6.0.0 react@^15.5.4 react-dom@^15.5.4 vega-lite@^2.0.0 vega@^3.0.0
```

You might still get some errors about react 16 so you can then do:

```
npm install --save react@^16.0.0 react-dom@^16.0.0 
```

[var name:"colorBy" value:`{}` /]

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "circle",
  encoding: {
    //x: {field: "dam", type: "nominal", // (1)
    x: {field: "dam", type: "nominal", axis:{labels:false}}, // (2)
    y: {field: "year", type: "temporal"},
    color: colorBy
  }
}` /]

Color by:
 [button onClick:`colorBy = {}` ]None[/button]
 [button onClick:`colorBy = {field: 'sex', type: 'nominal'}` ]Sex of Corgi[/button]


[var name:"colorBy2" value:`{}` /]

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "circle",
  encoding: {
    x: {field: "sire", type: "nominal", axis:{labels:false}}, 
    y: {field: "dam", type: "nominal", axis:{labels:false}},
    color: colorBy2
  }
}` /]

Color by:
 [button onClick:`colorBy2 = {}` ]None[/button]
 [button onClick:`colorBy2 = {field: 'year', type: 'ordinal'}` ]Year of Birth[/button]


[var name:"colorBy3" value:`{}` /]

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "bar",
  encoding: {
    x: {field: "year", type: "temporal"},
    y: {aggregate:"count", type: "quantitative", title:"Number of Corgis Born"}, // (2)
    color: colorBy3
  }
}` /]

Color by:
 [button onClick:`colorBy3 = {}` ]None[/button]
 [button onClick:`colorBy3 = {field: 'sex', type: 'nominal'}` ]Sex of Corgi Born[/button]
 [button onClick:`colorBy3 = {field: 'dam', type: 'nominal'}` ]Dam[/button]
 [button onClick:`colorBy3 = {field: 'FamilyName', type: 'nominal'}` ]Family Name[/button]


// Now, lets make these plots even more interactive.
// Lets say we really like the # of corgis born vs year

// ****COMMENT OUT ALL OTHERS, WORK ON CORIES PER YEAR ***

// we can, much like with ipywidgets, make little interactive sliders
// lets make a little slider to play with our year plot

// reference: https://github.com/idyll-lang/examples/blob/master/csv/index.idl
// And: https://vega.github.io/vega-lite/docs/filter.html

// lets first start by plotting only a little range in years
[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  transform:[{filter:{"timeUnit":"year", field:"year", "lte":2000}},
             {filter:{"timeUnit":"year", field:"year", "gte":1960}}],
  mark: "bar",
  encoding: {
    x: {
       field: "year",
       type: "temporal"//,
       //timeUnit:"year"
    },
    y: {
       aggregate:"count",
       type: "quantitative",
       axis:{title:"Number of Corgis Born"}
    }, 
    color: colorBy3
  }
}` /]

Color by:
 [button onClick:`colorBy3 = {}` ]None[/button]
 [button onClick:`colorBy3 = {field: 'sex', type: 'nominal'}` ]Sex of Corgi Born[/button]

// We can actually make this range a variable!

[var name:"yearStart" value:1960 /]
[var name:"yearEnd" value:2000 /]

// lets first start by plotting only a little range in years
[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  transform:[{filter:{"timeUnit":"year", field:"year", "lte":yearEnd}},
             {filter:{"timeUnit":"year", field:"year", "gte":yearStart}}],
  mark: "bar",
  encoding: {
    x: {
       field: "year",
       type: "temporal"//,
       //timeUnit:"year"
    },
    y: {
       aggregate:"count",
       type: "quantitative",
       axis:{title:"Number of Corgis Born"}
    }, 
    color: colorBy3
  }
}` /]

Color by:
 [button onClick:`colorBy3 = {}` ]None[/button]
 [button onClick:`colorBy3 = {field: 'sex', type: 'nominal'}` ]Sex of Corgi Born[/button]

[section] // format the sliders into their own section
Lowest Year: 1925 [Range min:1925 max:yearEnd value:yearStart /] 2020

Highest Year: 1925 [Range min:yearStart max:2020 value:yearEnd /] 2020
[/section]

We can also print out in text the values of our sliders - the current
maxiumum year of our plot is [dynamic min:1925 max:yearEnd step:1 value:yearStart /].
You'll note you can also drag around this value and it will update the plot.

// Note the similarities here with our ipython widgets


// Notes:scroller + data upate next time




// PART 5: Beginning interactivity
// lets check out what is in our "default" component directory

# Beginning Interactivity with D3.js

A good reference is the [D3 Link on the Idyll Webpage](https://idyll-lang.github.io/idyll-d3-component/).

In our basic template, we have a folder called components.  Let's check out the
custom-d3-component.js file. 

Before going through this code, lets use it here in our post and see what it does:

// Here is how we include it:
[var name:"state" value:0 /] // we have a "state" variable

[CustomD3Component className:"d3-component" state:state /]// tie our custom component to our var "state"
[button onClick:`state++`] // everytime we click a button, the state gets updated +1
  Click Me.
[/button]

### The Code:

The code that does this is:
// lets go through line by line and figure out what each line is

```
const React = require('react'); // this allows us to interact with the component
const D3Component = require('idyll-d3-component'); // uses D3.js and javascript to make our plot
const d3 = require('d3'); // use D3 javascript background

const size = 600; // our thing will be 600 pixels across

class CustomD3Component extends D3Component { // hey, add to D3!

  // This block here will just initialize our setup
  initialize(node, props) {
    const svg = this.svg = d3.select(node).append('svg');
    // first, lets make a box of size 600 X 600 pixels
    svg.attr('viewBox', `0 0 ${size} ${size}`)
      .style('width', '100%')
      .style('height', 'auto');

    // now, draw a circle
    svg.append('circle')
      .attr('r', 20) // 20px radius
      // these next two lines specify a random x & y coordinates
      .attr('cx', Math.random() * size)
      .attr('cy', Math.random() * size);
  }

  // on an "update" of our plot this is what we do:
  update(props, oldProps) {
    this.svg.selectAll('circle') // grab the circle part
      .transition() // make a nice animation
      .duration(750)
      .attr('cx', Math.random() * size) // update random location
      .attr('cy', Math.random() * size);
  }
}
```

Now that we know a bit about what we are doing, lets, starting from this custom component,
modify it to make our own.

In the components directory do:

```
cp custom-d3-component.js my-custom-d3-component.js
```

Then open my-custom-d3-component.js with your favorite text editor.

// start by just changing the names of things so that it says "my" now to remind
// us that we are doing things our way

[var name:"myState" value:0 /] 

[MyCustomD3Component className:"d3-component" state:myState /]
[button onClick:`myState++`] 
  Click Me.
[/button]












// Extra examples


//[data name:"cars" source:"cars.json"  /]
//[Table data:`cars.slice(0, 10)` /]

//[IdyllVegaLite data:cars spec:`{
//  width: 300,
//  height: 200,
//  renderer: 'svg',
//  mark: "circle",
//  encoding: {
//    x: {field: "Horsepower", type: "quantitative"},
//    y: {field: "Miles_per_Gallon", type: "quantitative"}
//  }
//}` /]


//[var name:"colorBy" value:`{}` /]

//[IdyllVegaLite data:cars spec:`{
//  width: 300,
//  height: 200,
//  mark: "circle",
//  encoding: {
//    x: {field: "Horsepower", type: "quantitative"},
//    y: {field: "Miles_per_Gallon", type: "quantitative"},
//    color: colorBy
//  }
//}` /]

//Color by:
// [button onClick:`colorBy = {}` ]None[/button]
// [button onClick:`colorBy = {field: 'Year', type: 'nominal'}` ]Year[/button]
// [button onClick:`colorBy = {field: 'Origin', type: 'nominal'}` ]Origin[/button]
