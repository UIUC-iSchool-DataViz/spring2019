// Note: to get the syntax highlighting to work I installed markdown-mode: following text editing for markdown mode: "jblevins.org/projects/markdown-mode/" */
// but I deleted the .elc file in my .emacs.d folder under markdown-mode folder and updated any <!-- or --> with the double slashes.  A mess. */

// FOR ME: Vanilla Emacs: You can use ` CTRL-x CTRL-+ ' and 'CTRL-x CTRL--' ( 'text-scale-adjust' ) to increase or decrease */

// NOTE: I'm gonna use a lot of * / at the end of lines -> this is just for proper syntax highlighting in my emacs editor, pay no mind

// go over: cd, pwd, ls */
// go over: text editors */
// go over: idyll create command => start new site */

// Also: we will start with a "blog" style post. */
//  Other styles will (maybe) be talked about later */
//  And can be changed with packages.json */


// PART 1: The basics 

// We will build up our intuition for how this works line by line

// First, lets cover some "command line" things we'll need:
//    Start first with cd, pwd, ls in command line

// Then: text editor, make sure you don't save as rich-text formatting

// Onto our first idyll project:
// so, here is what I get if I do: idyll create and enter "firstIdyll" for the
//    directory and "Alice" for the project name

// lets actually start with a blank slate ** DELETE ALL LINES BELOW HERE ** */



[meta title:"My First Project" description:"This is my very first project!" /]
// Note: I can leave comments to myself here with these to slashes
// this won't get compiled into our final webpage and I can remember what I'm doing!  neato */

// Lets re-put in a nice header for our webpage: */
[Header
  title:"Example Corgi Website"
  subtitle:"Welcome to my example project for IS590DVO at UIUC."
  author:"Jill P. Naiman"
  authorLink:"https://www.astronaiman.com" /] // this links to my personal webpage, so that is cool */
  
Like this stuff?  Check out all the great topics we covered at the [IS590DVO page for Spring 2019](https://uiuc-ischool-dataviz.github.io/spring2019online/).

This subsection here is just plain text. We can easily write stuff like we normally would, nbd. // magical */

Like in our jupyter notebooks, we can build up interactive elements, for example we can add sliders, toggles, etc. 

Here is how you can use a variable, by default it does a slider:

[var name:"exampleVar" value:6 /] // first, we define our variable and its name, and its initial value */
[Range min:-5 max:10 value:exampleVar /] // next, what are the min and max of the variable */
[Display value:exampleVar /] // finally - lets display the ol' thing */

// now we have a slider that moves around and prints stuff which is cool

// as an aside, lets say we want to write the code that it takes
// to make this slider, we can just copy paste and include
// 3 little ``` 's around it like so: */

```
[var name:"exampleVar" value:6 /] // first, we define our variable and its name, and its initial value 
[Range min:-5 max:10 value:exampleVar /] // next, what are the min and max of the variable 
[Display value:exampleVar /] // finally - lets display the ol' thing 
```

// // the above ``` 's are very common to Markdown */

Note that comments can be done with "//".  Now, lets move onto populating our new blog with stuff! // */


// PART 2: Adding images */

// lets put in some images, but first a header that says that is what we are doing */
## Putting in Images 

We'll start our blog with some examples of corgis in the wild, 
so our reader can identify them when they are out in the real world.

// lets start by adding a basic image to our website */
// we'll use on off the course website */
// (1) */
// [img 
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
// /] 

// */

// now, there are a few things we might want to fix about this */

//  (2) for example, lets change the size of this image */
// [img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200}`
// /] 
// now our little corgi image is a more reasonable size */

// (3) we can also add a margin to the top of our corgi image so that nothing gets too close
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200, margin: '30px auto'}`
///]

// */

// (4) Now, lets try 2 side by side images
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
//  style:`{width:200, margin: '30px auto'}`
///]
//[img
//  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2809.jpg'
//  style:`{width:200, margin: '30px auto'}`
///]
// note the above images are from 2 different locations - week 4 & week 10
// in this way, we can link images from around the internets

// so, we notice a few things here
// first the images are not the same height, but *are* the same width
// there is also no gab around them and they are side by side
// lets play with these options a big */


// (5) */
[img
  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png'
  style:`{height:300, padding: '10px'}`
/]
[img
  src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2809.jpg'
  style:`{height:300, padding: '10px'}`
/]
// now the images are the same height, side by side, and they have a border
//  note: if we re-size the post, eventualy one of the images goes underneath*/

// (6) - leave (5) up
// we can also do text next to images, and do cool things with their layout
// lets put a "fixed" image and then scroll some text next to it
// will do this with "waypoint" and "fixed" tags*/

// PART 3: Scrolling */

## Scrolling Overlays

We can also make our figures interactive.  Lists of corgi facts might be boring, but we 
can spice them up by doing scrolling overlays with this little bit of code:

```
[Scroller currentStep:scrollerIndex]
  [Graphic style:`{padding: 5}`]
      [img
        src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2814.jpg'
        style:`{height:700, float:"left"}` 
       /]
  [/Graphic]

  [Step]## Welsh Corgis are a small type of herding dog that originated in Wales, UK.[/Step]
  [Step]## "Corgi" is Welsh for "dwarf dog"   [/Step]
  [Step]## Queen Elizabeth II has owned more than 30 corgis in her lifetime.[/Step]
  [Step]## Corgi-Dachshund mixes are called dorgis.[/Step]

[/Scroller]
```

// more info here: https://idyll.pub/post/stack-scroll-0c3da7fb8e45f3ecb720bcf8/ */
[Scroller currentStep:scrollerIndex]
  [Graphic style:`{padding: 5}`]
      [img
        src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/IMG_2814.jpg'
//        style:`{height:700}` // */
        style:`{height:700, float:"left"}` // (2) lets say we want it on the left to make room */
       /]
  [/Graphic]

  [Step]## Welsh Corgis are a small type of herding dog that originated in Wales, UK.[/Step]
  [Step]## "Corgi" is Welsh for "dwarf dog"   [/Step]
  [Step]## Queen Elizabeth II has owned more than 30 corgis in her lifetime.[/Step]
  [Step]## Corgi-Dachshund mixes are called dorgis.[/Step]

[/Scroller]

// (2) Another fun layout type thing we can do is add fixed text or images 
//[Fixed]
//[img
//   //src:'https://uiuc-ischool-dataviz.github.io/spring2019online/week10/corg/imgcropped.png'
//   // (3) note: we can also copy figures into our website directory:
//   //  **cd to static/images
//   //  **Download imgcropped.png or use wget or curl
//   //  **Update this link
//   src:'static/images/imgcropped.png'
//   style:`{height:200}`
///]
//[/Fixed]
// Comment out this Fixed when done





// PART 4: Adding data and interactive viz using vega-lite
// Dataset from webscrape of: http://www.cardiped.net/browseDogs.php */

# Vega-Lite for dataviz

Now that we have the basics of Idyll down, let's build up some interactive visualizations that tie our opening images to a dataset.  This is a dataviz class after all!

We're going to start with a dataset that comes from an online [Corgi Database](http://www.cardiped.net/browseDogs.php).

Note: a webscrape was performed to grab this dataset with [Python code](https://uiuc-ischool-dataviz.github.io/spring2019online/week11/corg/grabCorgData_subpages.py) available for interested parties, but we won't be delving into webscraping for this course.


## Reading data basics

// more on publishing: https://idyll.pub/post/announcing-idyll-pub-0a3eff0661df3446a915700d/ */

First, lets start by reading in a data set.  We can do this by placing the dataset [that we downloaded from the week11 webpage](https://uiuc-ischool-dataviz.github.io/spring2019online/week11/corg/corgiData_countries.json) in our ```POST_DIRECTORY/data``` file.  Once we've done that, we can add this to our Idyll webpage:

```
[data name:"corgs" source:"corgiData_countries.json"  /]
[Table data:`corgs.slice(0, 10)` /]
```
which first names the dataset and then prints out its first 10 rows in a table.

[data name:"corgs" source:"corgiData_countries.json"  /]
[Table data:`corgs.slice(0, 10)` /]

Note that you can scroll around the table and move around the size of the displayed columns.

## Plotting our data

To plot this we want use vega-lite to start.  Don't forget, there are text and video install instructions for 
both Mac and Windows stored on the [week 10 webpage](https://uiuc-ischool-dataviz.github.io/spring2019online/week10/). We'll assume you have vega-lite for Idyll installed and go from there.


### Simple Scatter plots

Let's start with some simple scatter plots of our data.

We can run the simple code below and make a simple scatter plot of countries and years born:

```
[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "circle",
  encoding: {
    x: {field: "countries", type: "nominal"}, 
    y: {field: "year", type: "temporal"},
  }
}` /]
```

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "circle",
  encoding: {
    x: {field: "countries", type: "nominal"}, // (1) we can change the coloring by denoting what type of variable we are plotting */
    // x: {field: "countries", type: "nominal", axis:{labels:false}}, // (2) */
    y: {field: "year", type: "temporal"},
  }
}` /]

So this is a good start!  Let's add some other data into the mix by using colors.  We can select what we color by with a "color by" variable like so:

```
[var name:"colorBy" value:`{}` /]
```

[var name:"colorBy" value:`{}` /]

Once we've included this new variable in our webpage, we can re-do our scatter plot like so:

```
[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "circle",
  encoding: {
    x: {field: "countries", type: "nominal"}, 
    y: {field: "year", type: "temporal"},
    color: colorBy
  }
}` /]

Color by:
 [button onClick:`colorBy = {}` ]None[/button]
 [button onClick:`colorBy = {field: 'sex', type: 'nominal'}` ]Sex of Corgi[/button]
```

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "circle",
  encoding: {
    x: {field: "countries", type: "nominal"}, 
    y: {field: "year", type: "temporal"},
    color: colorBy
  }
}` /]

Color by:
 [button onClick:`colorBy = {}` ]None[/button]
 [button onClick:`colorBy = {field: 'sex', type: 'nominal'}` ]Sex of Corgi[/button]

// HERE - CHANGE COLOR SCHEME - https://vega.github.io/vega-lite/docs/scale.html#scheme */
// ALSO: make sure they recall scales and whatnot! */
// check out: https://vega.github.io/vega/docs/schemes/#reference */

Let's try another little scatter plot showing info about the parents and country of origin with:

```
[var name:"colorBy2" value:`{}` /]

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 400,
  mark: "circle",
 encoding: {
    x: {field: "sire", type: "nominal", axis:{labels:false}}, 
    y: {field: "dam", type: "nominal", axis:{labels:false}},
    color: colorBy2
  }
}` /]

Color by:
 [button onClick:`colorBy2 = {}` ]None[/button]
 [button onClick:`colorBy2 = {field: 'countries', type: 'nominal'}` ]Country[/button]
```


[var name:"colorBy2" value:`{}` /]

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 400,
  mark: "circle",
 encoding: {
    x: {field: "sire", type: "nominal", axis:{labels:false}}, 
    y: {field: "dam", type: "nominal", axis:{labels:false}},
    color: colorBy2
  }
}` /]

Color by:
 [button onClick:`colorBy2 = {}` ]None[/button]
// [button onClick:`colorBy2 = {field: 'countries', type: 'nominal'}` ]Country[/button] // */
 [button onClick:`colorBy2 = {field: 'countries', type: 'nominal', scale:{"scheme":"category20"}}` ]Country[/button]


Note that the default color scheme has a lot of repeated colors, which makes it a little hard to tell what country is what.  
We can check out the [available Vega-lite](https://vega.github.io/vega/docs/schemes/#reference) colors and pick one. 
Maybe ```category20``` could work, but its only 20 colors or maybe something like ```viridis``` would work too.

We can specify our colormap explicitly like so:

```
[var name:"colorBy2" value:`{}` /]

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 400,
  mark: "circle",
 encoding: {
    x: {field: "sire", type: "nominal", axis:{labels:false}}, 
    y: {field: "dam", type: "nominal", axis:{labels:false}},
    color: colorBy2
  }
}` /]

Color by:
 [button onClick:`colorBy2 = {}` ]None[/button]
 [button onClick:`colorBy2 = {field: 'countries', type: 'nominal', scale:{"scheme":"category20"}}` ]Country[/button]
```


// */



### Binning and aggregating data - histograms

Beyond scatter plots, we can do histograms in which we aggregate parts of our data set:

```
[var name:"colorBy3" value:`{}` /]

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "bar",
  encoding: {
    x: {field: "year", type: "temporal"},
    y: {aggregate:"count", type: "quantitative", title:"Number of Corgis Born"}
  }
}` /]
```

So here we are counting up all the entries in a particular year and plotting this as a histogram:


[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  mark: "bar",
  encoding: {
    x: {field: "year", type: "temporal"},
    y: {aggregate:"count", type: "quantitative", title:"Number of Corgis Born"}// , // (2) */
    // color: colorBy3 // */
  }
}` /]

// Color by:
//  [button onClick:`colorBy3 = {}` ]None[/button]
//  [button onClick:`colorBy3 = {field: 'sex', type: 'nominal'}` ]Sex of Corgi Born[/button]
// [button onClick:`colorBy3 = {field: 'dam', type: 'nominal'}` ]Dam[/button]
// [button onClick:`colorBy3 = {field: 'FamilyName', type: 'nominal'}` ]Family Name[/button] // */

We can do some light manipulations of our data with "transforms" and "filters".  There are more 
complicated examples of filtering our data [on the Vega-lite website docs](https://vega.github.io/vega-lite/docs/filter.html).

Here, lets just look at data between the years 1960 and 2000. We can do this by adding some filtering code 
to our vega-lite plot:

```
transform:[{filter:{"timeUnit":"year", field:"year", "lte":2000}},
	  {filter:{"timeUnit":"year", field:"year", "gte":1960}}],
```

// reference: https://github.com/idyll-lang/examples/blob/master/csv/index.idl
// And: https://vega.github.io/vega-lite/docs/filter.html

// lets first start by plotting only a little range in years */
[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 200,
  transform:[{filter:{"timeUnit":"year", field:"year", "lte":2000}},
             {filter:{"timeUnit":"year", field:"year", "gte":1960}}],
  mark: "bar",
  encoding: {
    x: {
       field: "year",
       type: "temporal"//,
       //timeUnit:"year"
    },
    y: {
       aggregate:"count",
       type: "quantitative",
       axis:{title:"Number of Corgis Born"}
    }// , 
    // color: colorBy3 // */
  }
}` /]

Neat!  Of course, the goal is to make these interactive plots. So let's get to it!

// Color by:
//  [button onClick:`colorBy3 = {}` ]None[/button]
// [button onClick:`colorBy3 = {field: 'sex', type: 'nominal'}` ]Sex of Corgi Born[/button]


// we can, much like with ipywidgets, make little interactive sliders
// lets make a little slider to play with our year plot

// We can actually make this range a variable! */


### Interactive plotting with Vega-lite

Just like we did with ipywidgets in our Jupyter notebooks, we can include sliders and toggles to 
make our plots interactive.  We in fact did this above when we made the ability to change colors 
based on different aspects of our datasets.

Let's add two new variables to our webpage to control the range over which we are plotting our data:

```
[var name:"yearStart" value:1960 /]
[var name:"yearEnd" value:2000 /]
```

[var name:"yearStart" value:1960 /]
[var name:"yearEnd" value:1970 /]

Now our "transform" operation will look a little different:

```
  transform:[{filter:{"timeUnit":"year", field:"year", "lte":yearEnd}},
             {filter:{"timeUnit":"year", field:"year", "gte":yearStart}}],
```

Finally, let's combine all of these concepts (colors, sliders, binning) into one MEGA-histogram with all kinds of 
interactions:

[var name:"colorBy3" value:`{}` /] 

[IdyllVegaLite data:corgs spec:`{
  width: 400,
  height: 400,
  transform:[{filter:{"timeUnit":"year", field:"year", "lte":yearEnd}},
             {filter:{"timeUnit":"year", field:"year", "gte":yearStart}}],
  mark: "bar",
  encoding: {
    x: {
       field: "year",
       type: "temporal"
    },
    y: {
       aggregate:"count",
       type: "quantitative",
       axis:{title:"Number of Corgis Born"}
    }, 
    color: colorBy3
  }
}` /]

Color by:
 [button onClick:`colorBy3 = {}` ]None[/button]
 [button onClick:`colorBy3 = {field: 'sex', type: 'nominal'}` ]Sex of Corgi Born[/button]
 [button onClick:`colorBy3 = {field: 'countries', type: 'nominal', scale:{"scheme":"category20"}}` ]Country[/button]

[section] // format the sliders into their own section */
Lowest Year: 1925 [Range min:1925 max:yearEnd value:yearStart /] 2020

Highest Year: 1925 [Range min:yearStart max:2020 value:yearEnd /] 2020
[/section]

We can also print out in text the values of our sliders - the current
minimum year of our plot is [dynamic min:1925 max:yearEnd step:1 value:yearStart /]. 
Which is given by the inline code:

```
[dynamic min:1925 max:yearEnd step:1 value:yearStart /]
```

You'll note you can also drag around this value and it will update the plot.

//  ** Other cool viz goes here ** */


# Let's talk about publishing

Now that we have created these cool images and interactive visualizations, we want to share them with the world!

We will publish our new data blog on github with the "github.io" webhosting services.  All for free!

Learn more about github.io here: [GitHub Pages](https://pages.github.com/).


// This is a revisit in later weeks, we got to publishing in week11 and then did sci viz in week 12 */
# Beginning Interactivity with D3.js (Return to the Corgs)

A good reference is the [D3 Link on the Idyll Webpage](https://idyll-lang.github.io/idyll-d3-component/) for D3.js 
within the Idyll framework, but you can also check out the extensive [D3.js docs](https://d3js.org/) for ideas and 
inspiration.

In our basic template, we have a folder called components.  Let's check out the
custom-d3-component.js file. 

Before going through this code, lets use it here in our post and see what it does:

// Here is how we include it: */
[var name:"state" value:0 /] // we have a "state" variable */

[CustomD3Component className:"d3-component" state:state /]// tie our custom component to our var "state" */
[button onClick:`state++`] // everytime we click a button, the state gets updated +1 */
  Click Me.
[/button]

## The Code:

In class, we'll go through this code line by line and comment what each line is doing.  
For reference, here are the comments on this code stored in ```components/custom-d3-component.js``` :

// lets go through line by line and figure out what each line is */
// see the custom-d3-component_comments.js file in components directory for more info */

```
// read in several libraries to allow us to
//  make reactive things & use d3.js
const React = require('react');
const D3Component = require('idyll-d3-component');
const d3 = require('d3');

// set the size of our canvas
const size = 600;

// here is the class we'll use to define our component
class CustomD3Component extends D3Component {

    // each custom component will have an initialize function
    //  that "sets the scene" and an update component
    //  that will update when something changes on our webpage
    initialize(node, props) {
	// let's use vector graphics to draw a viewer box
	const svg = this.svg = d3.select(node).append('svg');
	// define the size of our box based on our chosen
	//  constant size variable
	svg.attr('viewBox', `0 0 ${size} ${size}`)
	    .style('width', '100%')
	    .style('height', 'auto');

	// let's also include a little circle in our scene
	svg.append('circle')
	    .attr('r', 20) // 20px radius
       	    // next 2 lines specify random x&y
	    .attr('cx', Math.random() * size)
	    .attr('cy', Math.random() * size);
    }

    // now we define what happens when we update our scene
    update(props, oldProps) {
	// first, select the circle object
	this.svg.selectAll('circle')
	    .transition() // say we are changing things
	    .duration(750) // animation over 750 millisecs
	    .attr('cx', Math.random() * size) // place randomly again
	    .attr('cy', Math.random() * size);
    }
}

module.exports = CustomD3Component; // output our component

```

// */

We then include our custom component in our blog post with the following code in our ```index.idyll``` file:

```
[var name:"state" value:0 /] 

[CustomD3Component className:"d3-component" state:state /]// tie our custom component to our var "state" 
[button onClick:`state++`] // everytime we click a button, the state gets updated +1 
  Click Me.
[/button]
```

### Making our own custom component - the basics

Now that we know a bit about what we are doing, lets, starting from this custom component,
modify it to make our own.

In the ```components``` directory do:

```
cp custom-d3-component.js my-custom-d3-component.js
```

Note: this naming structure is important.  As we'll see below, our new output structure
will be called "MyCustomD3Component" - the "my" at the beginning is necessary.  
See more about this in the [Idyll D3.js post](https://idyll-lang.github.io/idyll-d3-component/).

Then open my-custom-d3-component.js with your favorite text editor and let's start adding!  
Note, you'll have to have [this image file](https://uiuc-ischool-dataviz.github.io/spring2019online/week11/images/imgcropped.png) saved in your ```static/images``` directory.

We'll again go through this line-by-line in class, but the final code will look something like:

```
const React = require('react');
const D3Component = require('idyll-d3-component');
const d3 = require('d3');

const size = 600;

// rename our class to our new component
class MyCustomD3Component extends D3Component {
//class CustomD3Component extends D3Component {
    
    initialize(node, props) {
	// all of this is the same
	const svg = this.svg = d3.select(node).append('svg');
	svg.attr('viewBox', `0 0 ${size} ${size}`)
	    .style('width', '100%')
	    .style('height', 'auto');
	
	// instead of a circle, lets add a little vector rectangel
	svg.append('rect')
	    .attr('width',100) // make it wide
	    .attr('height',20)
	    .attr('x', Math.random() * size)
	    .attr('y', Math.random() * size);
	
	// we can also add other things to our interactive for multiple objects
	svg.append('image') // let's add an image
	//.attr('xlink:href', 'https://uiuc-ischool-dataviz.github.io/spring2019online/week04/data/littleCorgiInHat.png')
	// note: we can also add stuff from our static images as well
	    .attr('xlink:href', 'static/images/imgcropped.png')
            .attr('x',Math.random()*size)
	    .attr('y',Math.random()*size)
	    .attr('width',200)
	    .attr('height',300)
    }

    // update the properties of both our rectangle & image
    //  randomly each time there is a state change
    update(props, oldProps) {
	this.svg.selectAll('rect')
	    .transition()
	    .duration(750)
	    .attr('x', Math.random() * size)
	    .attr('y', Math.random() * size);
	this.svg.selectAll('image')
	    .transition()
	    .duration(750)
	    .attr('x', Math.random() * size)
	    .attr('y', Math.random() * size);
    }
}

// export our new class
module.exports = MyCustomD3Component;
```



Finally, we can include our new component with the following code in our index.idyll file:

```
[var name:"myState" value:0 /] 

[MyCustomD3Component className:"d3-component" state:myState /]
[button onClick:`myState++`] 
  Click Me.
[/button]
```

[var name:"myState" value:0 /] 

[MyCustomD3Component className:"d3-component" state:myState /]
[button onClick:`myState++`] 
  Click Me.
[/button]


## A more complex D3.js example: Let's Make a Map

Note here the title of this subsection is gleefully stolen from [a blog post from one of the key D3.js developers](https://bost.ocks.org/mike/map/).

For our more complex example, we are going to make a map of our corgi's country of origin.

[MapCustomD3Component className:"d3-component" /]






Note: had to do npm --save install d3-tip

Also in the style.css file increase max height:

```
@media all and (max-width: 1000px) {
  .d3-component svg {
    max-height: 1000px;
  }
}
```


and

```
.d3-component svg {
  background: #ddd;
  max-height: 1000px;
}
```
